services:
  # Redis service for conversation storage and caching
  redis:
    image: redis:7-alpine
    container_name: modular-chatbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - chatbot-network
    environment:
      - REDIS_REPLICATION_MODE=master

  # Backend FastAPI service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: modular-chatbot-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      # Development hot reloading
      - ./backend:/app
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://frontend:80
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - chatbot-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: modular-chatbot-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      # Development hot reloading
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - chatbot-network

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local

# Custom network for service communication
networks:
  chatbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
